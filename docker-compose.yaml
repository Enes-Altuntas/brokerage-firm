version: '3.8'
services:

  api-gw:
    container_name: api-gw
    build:
      context: ./api-gateway
    ports:
      - "9050:9050"
    environment:
      SERVER_PORT: 9050
      ORDER_COMMAND_SERVICE_URL: http://order-command-service:9040
      ORDER_QUERY_SERVICE_URL: http://order-query-service:9041
      ASSET_SERVICE_URL: http://asset-service:9042
      AUTH_SERVICE_URL: http://wiremock:8080

  order-command-service:
    container_name: order-command-service
    build:
      context: ./order-command-service
    environment:
      SERVER_PORT: 9040
      DB_HOST: orderdb
      DB_PORT: 5432
      DB_NAME: order
      DB_USERNAME: admin
      DB_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_PASSWORD: redisadmin
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - orderdb
      - kafka

  order-query-service:
    container_name: order-query-service
    build:
      context: ./order-query-service
    environment:
      SERVER_PORT: 9041
      DB_HOST: orderdb
      DB_PORT: 5432
      DB_NAME: order
      DB_USERNAME: admin
      DB_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ELASTICSEARCH_URI: http://elasticsearch:9200
    depends_on:
      - orderdb
      - kafka
      - elasticsearch
      - order-command-service

  asset-service:
    container_name: asset-service
    build:
      context: ./asset-service
    environment:
      SERVER_PORT: 9042
      DB_HOST: assetdb
      DB_PORT: 5432
      DB_NAME: asset
      DB_USERNAME: admin
      DB_PASSWORD: admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_PASSWORD: redisadmin
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - assetdb
      - kafka

  wiremock:
    image: wiremock/wiremock:2.35.0
    container_name: wiremock
    ports:
      - "9039:8080"
    volumes:
      - ./docker-data/wiremock/mappings:/home/wiremock/mappings

  redis:
    image: redis:latest
    container_name: redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redisadmin}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD:-redisadmin}" ]
    volumes:
      - redis-data:/data

  assetdb:
    container_name: assetdb
    image: postgres:latest
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=asset
    volumes:
      - postgres-asset-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=10", "-c", "max_wal_senders=10"]

  orderdb:
    container_name: orderdb
    image: postgres:latest
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=order
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=10", "-c", "max_wal_senders=10"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601

  connect:
    image: debezium/connect:2.6.1.Final
    container_name: connect
    depends_on:
      - kafka
      - orderdb
      - assetdb
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_PLUGIN_PATH: /kafka/connect

volumes:
  postgres-asset-data:
  postgres-order-data:
  redis-data:
  elasticsearch-data:
